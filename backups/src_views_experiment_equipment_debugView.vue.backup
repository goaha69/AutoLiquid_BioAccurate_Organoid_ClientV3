<template>
  <a-modal :title="'调试设备--' + equipmentName" :width="1200" :open="visible" :maskClosable="false" @cancel="handleCancel" :footer="null">
    <a-spin :spinning="formLoading">
      <a-form :model="form" >
        <a-form-item style="display: none;" has-feedback>
          <a-input v-model:value="form.id" ></a>
        </a-form-item>

        <a-row :gutter="24">
          <a-col ? md="24" : sm="24">
            <a-form-item>
              <a-button type="primary" @click.stop="btnConnect">连接设备</a-button>
                <a-divider type="vertical"></a>
                <a-button type="primary" @click="btnInitMachine">全部复位</a-button>
            </a-form-item>
          </a-col>
        </a-row>

        <a-row :gutter="24">
          <a-col ? md="24" : sm="24">
            <a-form-item>
                <a-button type="primary" @click="btnInitCmd('xi')" :loading="isLoading('xi')"  :disabled="isAnyLoading()" >X轴复位/a-button>
                <a-button type="primary" @click="btnInitCmd('yi')" :loading="isLoading('yi')"  :disabled="isAnyLoading()"> Y轴复位/a-button>
                <a-button type="primary" @click="btnInitCmd('zi')" :loading="isLoading('zi')"  :disabled="isAnyLoading()" >Z轴复位/a-button>
                <a-button type="primary" @click="btnInitCmd('pi')" :loading="isLoading('pi')"  :disabled="isAnyLoading()" >P轴复位/a-button>

                <a-divider type="vertical"></a>
                
                <a-button type="primary" @click="btnInitCmd('qi')" :loading="isLoading('qi')"  :disabled="isAnyLoading()" >Q轴复位/a-button>
                <a-button type="primary" @click="btnInitCmd('wi')" :loading="isLoading('wi')"  :disabled="isAnyLoading()" >W轴复位/a-button>
                <a-button type="primary" @click="btnInitCmd('mi')" :loading="isLoading('mi')"  :disabled="isAnyLoading()" >M轴复位/a-button>
                <a-button type="primary" @click="btnInitCmd('ni')" :loading="isLoading('ni')"  :disabled="isAnyLoading()" >N轴复位/a-button>
            </a-form-item>
          </a-col>
        </a-row>
        <a-row :gutter="24">
          <div style="margin-top:10px;">
            <sp-input-number label="X" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.xPos" allow-clear></sp>
            <a-button type="primary" @click="btnGoPos('xa')" :loading="isLoading('xa')"  :disabled="isAnyLoading()" >执行</a-button>
            <sp-input-number label="Y" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.yPos" allow-clear></sp>
            <a-button type="primary" @click="btnGoPos('ya')" :loading="isLoading('ya')"  :disabled="isAnyLoading()" >执行</a-button>
            <sp-input-number label="Z" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.zPos" allow-clear></sp>
            <a-button type="primary" @click="btnGoPos('za')" :loading="isLoading('za')"  :disabled="isAnyLoading()" >执行</a-button>
            <sp-input-number label="P" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.pPos" allow-clear></sp>
            <a-button type="primary" @click="btnGoPos('pa')" :loading="isLoading('pa')"  :disabled="isAnyLoading()" >执行</a-button>
          </div>
          <div style="margin-top:10px;">
            <sp-input-number label="Q" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.qPos" allow-clear ></sp>
            <a-button type="primary" @click="btnGoPos('qa')" :loading="isLoading('qa')"  :disabled="isAnyLoading()" >执行</a-button>
            <sp-input-number label="W" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.wPos" allow-clear ></sp>
            <a-button type="primary" @click="btnGoPos('wa')" :loading="isLoading('wa')"  :disabled="isAnyLoading()" >执行</a-button>
            <sp-input-number label="M" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.mPos" allow-clear ></sp>
            <a-button type="primary" @click="btnGoPos('ma')" :loading="isLoading('ma')"  :disabled="isAnyLoading()" >执行</a-button>
            <sp-input-number label="N" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.nPos" allow-clear ></sp>
            <a-button type="primary" @click="btnGoPos('na')" :loading="isLoading('na')"  :disabled="isAnyLoading()" >执行</a-button>
          </div>
          <div style="margin-top:10px;">
            <sp-input-number label="@" :labelWidth="40" placeholder="0.00" :max="10000" unit="mm" v-model:value="paramsPos.atPos" allow-clear ></sp>
              <a-select style="width ? 100px" v-model : value="atName"  placeholder="textarea with clear icon">
                <a-select-option v-for="(item, index) in atRows" :key="index" :value="item">{{ item }}</a-select-option>
              </a-select>
            <a-button type="primary" @click="btnGoPosAt()" :loading="isLoading('at')"  :disabled="isAnyLoading()" >执行</a-button> 
          </div>
          <div style="margin-top:10px;">
            <a-form-item label="命令" :labelCol="labelCol_JG" :wrapperCol="wrapperCol_JG" has-feedback>
              <a-textarea placeholder="请输入命令" v-model:value="cmdParam" allow-clear :auto-size="{ minRows: 10, maxRows: 15 }"></a>
              <a-button type="primary" @click="btnDoCmd()" :loading="isLoading('cmd')"  :disabled="isAnyLoading()">DoCmd</a-button> 
            </a-form-item>
          </div>
        </a-row>
      </a-form>
    </a-spin>
  </a-modal>
</template>

<script>
import { ref } from 'vue';
import {connect,doCmd} from '@/api/modular/experiment/debug'  
import SpInputNumber from '@/components/spInputNumber.vue';
import SpInput from '@/components/spInput.vue';

export default {
  components: {
    SpInputNumber,
    SpInput
  },
  data() {
    return {
      labelCol: { xs: { span: 24},sm: { span: 6}},
      wrapperCol: {xs: {span: 24},sm: {span: 16}},
      labelCol_JG: { xs: {span: 24},sm: {span: 3}},
      wrapperCol_JG: {xs: {span: 24}, sm: { span: 20}},
      loadingButton:'',
      visible: false,
      confirmLoading: false,
      formLoading: false,
      // 升级为 ref 对象
      form: ref({}),
      equipmentName:'',
      cmdParam:'',
      myInputNumberStep:0.5,
      myInputNumberPrecision:2,
      paramsPos:{xPos:0.00,yPos:0.00,zPos:0.00,pPos:0.00,qPos:0.00,wPos:0.00,mPos:0.00,nPos:0.00,atPos:0.00},
      atName:"@PO1",
      atRows:["@PO1","@PO2","@PO3","@PO4","@PO5","@PO6","@PO7","@PO8"],
    }
  },
  methods: {
    btnInitMachine()
    {

    },
    /**
     * 设置loading状
     */
    setLoading(button) {this.loadingButton = button},
    /**
     * 重置loading状
     */
    resetLoading() {this.loadingButton = ''},
    /**
     * 判断特定按钮是否在loading状
     */
    isLoading(button) {return this.loadingButton == button},
    /**
     * 判断是否有按钮在loading状
     */
    isAnyLoading() {return this.loadingButton != ''},
    /**
     * 初始化方法
     */
    debug(record) {
      this.visible = true
      this.equipmentName=record.name
      setTimeout(() => {
        this.form.id = record.id
      }, 100)
    },
    btnConnect() {
      const data = this.form
      console.log('连接设备ID:' + data.id)
      connect(data).then((res) => {
        if (res.success) {
          this.$message.success('设备连接成功')
          this.$refs.table.refresh()
          this.$emit('ok', null)
        } else {
          this.$message.error('设备连接失败:' + res.message)
        }
      }).catch((err) => {
        this.$message.error('设备连接错误:' + err.message)
      })
    },
    btnInitCmd(Cmd) {
      const data = this.form
      data.cmd=Cmd
      this.setLoading(data.cmd)
      doCmd(data).then((res) => {
        this.resetLoading()
        if (res.success) {
        } else {
          this.$message.error('执行命令失败::::' + res.message)
        }
      }).catch((err) => {
        this.$message.error('执行命令错误::::' + err.message)
      })
    },      
    btnDoCmd() {
      const data = this.form
      data.cmd=this.cmdParam
      console.log(this.cmdParam)
      if(!this.cmdParam || this.cmdParam.trim().length === 0)
      {
        this.$message.error('请输入命令!')
          return;
      }
      this.setLoading("cmd")
      doCmd(data).then((res) => {
        this.resetLoading()
        if (res.success) {
        } else {
          this.$message.error('执行命令失败::::' + res.message)
        }
      }).catch((err) => {
        this.$message.error('执行命令错误::::' + err.message)
      })
    },    
    btnGoPos(axle) {
      const data = this.form
      var value=0.0
      this.setLoading(aa)
      var aa = axle.substring(0,1)
      console.log(aa)
      switch(aa)
      {
        case 'x':value=this.paramsPos.xPos;break;
        case 'y':value=this.paramsPos.yPos;break;
        case 'z':value=this.paramsPos.zPos;break;
        case 'p':value=this.paramsPos.pPos;break;

        case 'q':value=this.paramsPos.qPos;break;
        case 'w':value=this.paramsPos.wPos;break;
        case 'm':value=this.paramsPos.mPos;break;
        case 'n':value=this.paramsPos.nPos;break;
      }
      data.cmd=aa+'A'+value.toFixed(2)
      console.log(data.cmd)
      doCmd(data).then((res) => {
        this.resetLoading()
        if (res.success) {
        } else {
          this.$message.error('执行命令失败::::' + res.message)
        }
      }).catch((err) => {
        this.$message.error('执行命令错误::::' + err.message)
      })
    },   
    btnGoPosAt() {
      const data = this.form
      var value=0.0
      value=this.paramsPos.atPos
      this.setLoading("at")
      data.cmd='X'+'A'+value.toFixed(2) + this.atName
      doCmd(data).then((res) => {
        this.resetLoading()
        if (res.success) {
        } else {
          this.$message.error('执行命令失败::::' + res.message)
        }
      }).catch((err) => {
        this.$message.error('执行命令错误::::' + err.message)
      })
    },  
    handleCancel() {
      this.form.id = ''
      this.visible = false
    }
  }
}
</script>
<style scoped>
.form-footer {
  text-align: right; /* 使按钮居中 */
}
</style>
