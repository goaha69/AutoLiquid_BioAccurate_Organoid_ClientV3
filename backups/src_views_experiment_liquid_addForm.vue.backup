<template>
  <a-modal
    title="Լ"
    :width="1300"
    :open="visible"
    :maskClosable="false"
    @ok="handleSubmit"
    @cancel="handleCancel"
  >
    <a-spin :spinning="formLoading">
      <a-form :form="form">
        <a-row :gutter="8">
          <div>
            <sp-input
              label="Ĳı"
              :labelWidth="150"
              :required="true"
              :isError="errors.code"
              v-model:value="attributeData.code"
            ></sp>
            <sp-input
              label="Ĳ"
              :required="true"
              :isError="errors.name"
              :inputWidth="300"
              v-model:value="attributeData.name"
            ></sp>

            <span
              class="span-label"
              style="margin-left ? 0px;width : 100px;"
            ></span>
            <a-select
              style="width: 100px"
              v-model:value="attributeData.liquidRange"
            >
              <a-select-option
                v-for="(item, index) in liquidRanges"
                :key="index"
                :value="item.code"
              >{{ item.value }}</a-select-option>
            </a-select>
            <span class="span-unit">(l)</span>
          </div>

          <div style="margin-top:10px;">
            <sp-input
              label="κţŨȣ"
              :labelWidth="150"
              v-model:value="attributeData.barcode"
            ></sp>
          </div>
        </a-row>

        <a-row :gutter="8">
          <a-card
            title="Һ"
            :bordered="false"
          >
            <div>
              <sp-input-number
                label="Һƫ"
                :labelWidth="120"
                unit="mm"
                v-model:value="attributeData.absorbOffset"
              ></sp>
              <sp-input
                label="Һٶ"
                :labelWidth="130"
                v-model:value="attributeData.absorbSpeed"
              ></sp>
              <sp-input-number
                label="Һȴ"
                :labelWidth="110"
                unit="s"
                v-model:value="attributeData.absorbDelay"
              ></sp>
              <sp-input
                label="Һٶ"
                :labelWidth="120"
                v-model:value="attributeData.absorbHeight2NormalHeightSpeed"
              ></sp>
            </div>

            <div style="margin-top:10px;">
              <sp-input-number
                label="Һ߶"
                :labelWidth="120"
                unit="mm"
                v-model:value="attributeData.absorbHeight2LiftingHeight"
              ></sp>
              <sp-input-number
                label="Һȴ"
                :labelWidth="130"
                unit="s"
                v-model:value="attributeData.absorbDelayAfterLift"
              ></sp>
              <sp-input
                label="ǰٶ"
                :labelWidth="170"
                v-model:value="attributeData.absorbMixingSpeed"
              ></sp>
            </div>
            <div style="margin-top:10px;">
              <sp-input
                label="P-ZҺٶתϵ"
                :labelWidth="170"
                unit="mm"
                v-model:value="attributeData.pToZSpeedCoefficient"
              ></sp>
            </div>
          </a-card>
        </a-row>

        <a-row :gutter="8">
          <a-card
            title="Һ"
            :bordered="false"
          >
            <div>
              <sp-input-number
                label="Һƫ"
                :labelWidth="120"
                unit="mm"
                v-model:value="attributeData.jetOffset"
              ></sp>
              <sp-input
                label="Һٶ"
                :labelWidth="120"
                v-model:value="attributeData.jetSpeed"
              ></sp>
              <sp-input-number
                label="Һȴ"
                :labelWidth="120"
                unit="s"
                v-model:value="attributeData.jetDelay"
              ></sp>
              <sp-input
                label="Һٶ"
                :labelWidth="120"
                v-model:value="attributeData.jetHeight2NormalHeightSpeed"
              ></sp>
            </div>

            <div style="margin-top:10px;">
              <sp-input-number
                label="ڸ߶"
                :labelWidth="120"
                unit="mm"
                v-model:value="attributeData.jetWallHeight"
              ></sp>
              <sp-input-number
                label="ƫ"
                :labelWidth="120"
                unit="mm"
                v-model:value="attributeData.jetWallOffset"
              ></sp>
              <sp-input-number
                label="ڴ"
                :labelWidth="180"
                unit="mm"
                v-model:value="attributeData.jetWallOffset"
              ></sp>

              <span
                class="span-label"
                style="width:130px;"
              >Һ</span>
              <a-radio-group v-model:value="attributeData.jetWall">
                <a-radio
                  v-for="(item, index) in jetWalls"
                  :key="index"
                  :value="item.code"
                >{{ item.value }}</a-radio>
              </a-radio-group>
            </div>

            <div style="margin-top:10px;">
              <sp-input
                label="ٶ"
                :labelWidth="120"
                v-model:value="attributeData.jetMixingSpeed"
              ></sp>
            </div>
          </a-card>
        </a-row>

        <a-row :gutter="8">
          <a-card
            title=""
            :bordered="false"
          >
            <div>
              <sp-input-number
                label="Һǰ"
                :labelWidth="110"
                unit="%"
                v-model:value="attributeData.absorbAirBeforePercent"
              ></sp>
              <sp-input-number
                label="Һ"
                :labelWidth="110"
                unit="%"
                v-model:value="attributeData.absorbAirAfterPercent"
              ></sp>
              <sp-input-number
                label="һҺ"
                :labelWidth="175"
                unit="%"
                v-model:value="attributeData.absorbLiquidMoreOne2MorePercent"
              ></sp>
              <sp-input-number
                label="һҺ"
                :labelWidth="205"
                unit="%"
                v-model:value="attributeData.jetLiquidMoreOne2MoreScale"
              ></sp>
              <div style="margin-top:10px;">
                <span class="span-label" style="width:100px;">Ƿ</span>
                <a-checkbox v-model:value="attributeData.isAmountAir" ></a>
              </div> 
            </div>
          </a-card>
        </a-row>

      </a-form>
    </a-spin>
  </a-modal>
</template>

<script>
import { exp_liquid_add } from '@/api/modular/experiment/liquidManage'
import { sysDictTypeDropDown } from '@/api/modular/system/dictManage'
import SpInputNumber from '@/components/spInputNumber.vue';
import SpInput from '@/components/spInput.vue';
export default {
  components: {
    SpInputNumber,
    SpInput
  },
  data () {
    return {
      Data: [],
      visible: false,
      formLoading: false,
      form: this.$form.createForm(this),
      liquidRanges: [],
      jetWalls: [],
      attributeData: {
        code: '',
        name: '',
        remark: '',
        absorbHeight: 0,
        absorbSpeed: '',
        absorbDelay: 0,
        absorbHeight2NormalHeightSpeed: '',
        absorbMixingHeight: 0,
        absorbMixingSpeed: '',
        jetHeight: 0,
        jetSpeed: '',
        jetDelay: 0,
        jetHeight2NormalHeightSpeed: '',
        jetWallHeight: 0,
        jetWallOffset: 0,
        jetWallTrigger: 0,
        jetMixingHeight: 0,
        jetMixingSpeed: '',
        jetOffset: 0,
        jetWall: false,
        absorbOffset: 0,
        absorbAirBeforePercent: 0,
        absorbAirAfterPercent: 0,
        absorbLiquidMoreOne2MorePercent: 0,
        jetLiquidMoreOne2MoreScale: 0,
        liquidRange: 0,
        pToZSpeedCoefficient: 0,
      },
      errors: {
        code: false,
        name: false
      },
    }
  },
  methods: {
    resetAttribute () {
      this.attributeData = {
        id: 0,
        code: '',
        name: '',
        remark: '',
        absorbHeight: 0,
        absorbSpeed: '',
        absorbDelay: 0,
        absorbHeight2NormalHeightSpeed: '',
        absorbMixingHeight: 0,
        absorbMixingSpeed: '',
        jetHeight: 0,
        jetSpeed: '',
        jetDelay: 0,
        jetHeight2NormalHeightSpeed: '',
        jetWallHeight: 0,
        jetWallOffset: 0,
        jetWallTrigger: 0,
        jetMixingHeight: 0,
        jetMixingSpeed: '',
        jetOffset: 0,
        jetWall: false,
        absorbOffset: 0,
        absorbAirBeforePercent: 0,
        absorbAirAfterPercent: 0,
        absorbLiquidMoreOne2MorePercent: 0,
        jetLiquidMoreOne2MoreScale: 0,
        liquidRange: 0,
        pToZSpeedCoefficient: 0,
      }
      this.errors = {
        code: false,
        name: false,
      }
    },
    /**
     * ȡֵ
       */
    sysDictTypeDropDown (text) {
      sysDictTypeDropDown({ code: 'yes_true_false' }).then((res) => {
        this.jetWalls = res.data
        this.jetWalls.forEach((item) => {
          item.code = item.code === 'true' : true : false
        })
      })

      sysDictTypeDropDown({ code: 'liquid_range' }).then((res) => {
        this.liquidRanges = res.data
        this.liquidRanges.forEach((item) => {
          item.code = parseInt(item.code)

          if (this.attributeData.liquidRange == 0)
            this.attributeData.liquidRange = parseInt(item.code)
        })
      })
    },
    /**
       * ʼ
       */
      add (record) {
      this.visible = true
      this.resetAttribute()

      this.sysDictTypeDropDown()
    },
    validateFields () {
      var result = true;
      this.errors.code = !this.attributeData.code;
      this.errors.name = !this.attributeData.name;
      console.log(this.errors)
      for (const key in this.errors) {
        if (this.errors[key]) {
          result = false
          break;
        }
      }
      return result
    },
    /**
     * ύ
       */
    handleSubmit () {
      console.log('=================handleSubmit=================')
      if (!this.validateFields())
        return;

      this.formLoading = true
      this.attributeData.jetWall = this.attributeData.jetWall === true ? 1 : 0

      exp_liquid_add(this.attributeData).then((res) => {
        if (res.success) {
          this.$message.success('ɹ')
          this.$emit('ok', this.attributeData)
          this.handleCancel()
        } else {
          this.$message.error(res.message)
        }
      }).finally((res) => {
        this.formLoading = false
      })
    },
    handleCancel () {
      this.form.resetFields()
      this.visible = false
    }
  }
}
</script>

<style scoped>
.span-unit {
  margin-left: 5px;
}
.span-label {
  width: 130px;
  text-align: right;
  display: inline-block;
  color: black;
}
</style>
